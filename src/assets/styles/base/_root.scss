
@use '../abstracts/variables' as *;
@use '../abstracts/tokens' as *;
@use 'sass:color';

$darken-amount: 60%;
$lighten-amount: 50%;

$mergedColors: map-merge($colors, (
  "body-background": $body-background,
  "body-text": $body-text,
  "muted-text": $text-muted-color,
  "current": currentColor,
  "transparent": transparent,
));

@function hexToHsl($color) {
  @return hue($color) saturation($color) lightness($color);
}

// Named colors
@each $name, $color in $mergedColors {

  // if $color is a hex value, convert it to hsl
  // otherwise, use the color as is
  @if type-of($color) == "color" {
    :root {
      --color-#{$name}-hex: #{$color};
      --color-#{$name}: #{hexToHsl($color)};
    }
  } @else {
    :root {
      --color-#{$name}-hex: #{$color};
    }
  }

}


// Theme colors
:root {
  --color-primary: #{hexToHsl($color-primary)};
  --color-primary-content: #{hexToHsl(lighten($color-primary, $lighten-amount))};
  --color-secondary: #{hexToHsl($color-secondary)};
  --color-secondary-content: #{hexToHsl(lighten($color-secondary, $lighten-amount))};
  --color-accent: #{hexToHsl($color-accent)};
  --color-accent-content: #{hexToHsl(lighten($color-accent, $lighten-amount))};
  --color-neutral: #{hexToHsl($color-neutral)};
  --color-neutral-content: #{hexToHsl(lighten($color-neutral, $lighten-amount))};
}

// Feedback colors
:root {
  --color-success: #{hexToHsl($color-success)};
  --color-success-content: #{hexToHsl(lighten($color-success, $lighten-amount))};
  --color-info: #{hexToHsl($color-info)};
  --color-info-content: #{hexToHsl(lighten($color-info, $lighten-amount))};
  --color-warning:  #{hexToHsl($color-warning)};
  --color-warning-content: #{hexToHsl(lighten($color-warning, $lighten-amount))};
  --color-danger:   #{hexToHsl($color-danger)};
  --color-danger-content: #{hexToHsl(lighten($color-danger, $lighten-amount))};
}

